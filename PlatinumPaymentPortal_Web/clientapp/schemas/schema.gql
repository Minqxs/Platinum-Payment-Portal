schema {
  query: Query
  mutation: Mutation
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

type CreatePaymentRequestPayload {
  paymentRequest: PaymentRequest
  query: Query!
}

type DeletePaymentRequestPayload {
  paymentRequest: PaymentRequest
  query: Query!
}

type Department implements Node {
  id: ID!
  nameOfDepartment: String!
}

type GeneratePaymentRequestPdfPayload {
  string: String
  query: Query!
}

type Mutation @authorize {
  generatePaymentRequestPdf(input: GeneratePaymentRequestPdfInput!): GeneratePaymentRequestPdfPayload! @cost(weight: "10")
  createPaymentRequest(input: CreatePaymentRequestInput!): CreatePaymentRequestPayload! @cost(weight: "10")
  updatePaymentRequest(input: UpdatePaymentRequestInput!): UpdatePaymentRequestPayload! @cost(weight: "10")
  signOffPaymentRequest(input: SignOffPaymentRequestInput!): SignOffPaymentRequestPayload! @authorize(roles: [ "Admin", "Manager" ]) @cost(weight: "10")
  deletePaymentRequest(input: DeletePaymentRequestInput!): DeletePaymentRequestPayload! @cost(weight: "10")
}

type PaymentRequest implements Node {
  id: ID!
  submittedById: UUID!
  submittedBy: User!
  invoiceDate: DateTime!
  paymentDateRequested: DateTime!
  paymentRicpientName: String!
  ricpientBankDetails: String!
  paymentDescription: String!
  departmentId: Int!
  department: Department!
  managerId: UUID!
  manager: User!
  isSignedOff: Boolean!
  signedOffAt: DateTime
  coverSheetPdfPath: String
  invoiceFile: [Byte!]!
  invoiceFileName: String!
  proofOfPaymentFile: [Byte!]
  proofOfPaymentFileName: String
  isDeleted: Boolean!
  paymentRequestNumber: Int!
}

type Query {
  "Fetches an object given its ID."
  node("ID of the object." id: ID!): Node @cost(weight: "10")
  "Lookup nodes by a list of IDs."
  nodes("The list of node IDs." ids: [ID!]!): [Node]! @cost(weight: "10")
  paymentRequests: [PaymentRequest!] @cost(weight: "10")
  managers: [User!]! @cost(weight: "10")
  departments: [Department!]! @cost(weight: "10")
  me: User! @cost(weight: "10")
}

type SignOffPaymentRequestPayload {
  paymentRequest: PaymentRequest
  query: Query!
}

type UpdatePaymentRequestPayload {
  paymentRequest: PaymentRequest
  query: Query!
}

type User implements Node {
  firstName: String!
  lastName: String!
  fullName: String!
  signatureImage: [Byte!]
  signatureImageMimeType: String
  id: ID!
  userName: String
  normalizedUserName: String
  email: String
  normalizedEmail: String
  emailConfirmed: Boolean!
  passwordHash: String
  securityStamp: String
  concurrencyStamp: String
  phoneNumber: String
  phoneNumberConfirmed: Boolean!
  twoFactorEnabled: Boolean!
  lockoutEnd: DateTime
  lockoutEnabled: Boolean!
  accessFailedCount: Int!
  roles: [RoleEnum!]! @cost(weight: "10")
  async(id: ID!): User! @cost(weight: "10")
}

input CreatePaymentRequestInput {
  input: PaymentRequestCreateInput!
}

input DeletePaymentRequestInput {
  input: PaymentRequestDeleteInput!
}

input GeneratePaymentRequestPdfInput {
  input: PaymentRequestDeleteInput!
}

input PaymentRequestCreateInput {
  managerId: ID!
  departmentId: ID!
  invoiceDate: DateTime!
  paymentRequestedDate: DateTime!
  paymentRecipient: String!
  paymentDetails: String!
  description: String!
  supplierInvoice: Upload
  proofOfPayment: Upload
}

input PaymentRequestDeleteInput {
  paymentRequestId: ID!
}

input PaymentRequestEditInput {
  paymentRequestId: ID!
  departmentId: ID!
  managerId: ID!
  invoiceDate: DateTime!
  paymentRequestedDate: DateTime!
  paymentRecipient: String!
  paymentDetails: String!
  description: String!
  supplierInvoice: Upload
  proofOfPayment: Upload
}

input SignOffPaymentRequestInput {
  input: PaymentRequestDeleteInput!
}

input UpdatePaymentRequestInput {
  input: PaymentRequestEditInput!
}

"Defines when a policy shall be executed."
enum ApplyPolicy {
  "Before the resolver was executed."
  BEFORE_RESOLVER
  "After the resolver was executed."
  AFTER_RESOLVER
  "The policy is applied in the validation step before the execution."
  VALIDATION
}

enum RoleEnum {
  ADMIN
  EMPLOYEE
  MANAGER
}

"The authorize directive."
directive @authorize("The name of the authorization policy that determines access to the annotated resource." policy: String "Roles that are allowed to access the annotated resource." roles: [String!] "Defines when when the authorize directive shall be applied.By default the authorize directives are applied during the validation phase." apply: ApplyPolicy! = BEFORE_RESOLVER) repeatable on OBJECT | FIELD_DEFINITION

"The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response."
directive @cost("The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc." weight: String!) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

"The `Byte` scalar type represents non-fractional whole numeric values. Byte can represent values between 0 and 255."
scalar Byte

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")

"The `Upload` scalar type represents a file upload."
scalar Upload